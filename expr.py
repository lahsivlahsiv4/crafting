# Autogenerated file

from token import Token

class ExprVisitor:
    def visit_binary_expr(self, expr):
        raise NotImplementedError()
    def visit_grouping_expr(self, expr):
        raise NotImplementedError()
    def visit_literal_expr(self, expr):
        raise NotImplementedError()
    def visit_unary_expr(self, expr):
        raise NotImplementedError()


class Expr:
    def accept(self, visitor : ExprVisitor):
        raise NotImplementedError()

class Binary(Expr):
    left : Expr
    operator : Token
    right : Expr

    def __init__(self, left : Expr, operator : Token, right : Expr):
        self.left = left
        self.operator = operator
        self.right = right

    def accept(self, visitor : ExprVisitor):
        return visitor.visit_binary_expr(self)


class Grouping(Expr):
    expression : Expr

    def __init__(self, expression : Expr):
        self.expression = expression

    def accept(self, visitor : ExprVisitor):
        return visitor.visit_grouping_expr(self)


class Literal(Expr):
    value : object

    def __init__(self, value : object):
        self.value = value

    def accept(self, visitor : ExprVisitor):
        return visitor.visit_literal_expr(self)


class Unary(Expr):
    operator : Token
    right : Expr

    def __init__(self, operator : Token, right : Expr):
        self.operator = operator
        self.right = right

    def accept(self, visitor : ExprVisitor):
        return visitor.visit_unary_expr(self)


